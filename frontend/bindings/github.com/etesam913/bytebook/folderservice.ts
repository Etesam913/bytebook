// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AddFolder(folderName: string): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(556274632, folderName) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ClearTrash deletes all files in the trash directory of the project.
 * It constructs the path to the trash directory, reads the contents, and attempts to delete each file.
 * It returns a response indicating success or failure, including details of any files that could not be deleted.
 */
export function ClearTrash(): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(960303200) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function DeleteFolder(folderName: string): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(562179514, folderName) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function DoesFolderExist(folderName: string): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2843423543, folderName) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetFilesInTrash retrieves the names of all files in the trash directory of the project.
 * It ensures that the trash directory exists and returns a response indicating success or failure.
 * If successful, the response includes the list of file names found in the trash directory.
 */
export function GetFilesInTrash(): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1406513737) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetFolders(): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3909346760) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Updates the folder name
 */
export function RenameFolder(oldFolderName: string, newFolderName: string): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(192921743, oldFolderName, newFolderName) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function RevealFolderInFinder(folderName: string): Promise<$models.FolderResponse> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3291172199, folderName) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.FolderResponse.createFrom;
